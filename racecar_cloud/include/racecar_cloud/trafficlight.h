// Generated by gencpp from file visionmsg/trafficlight.msg
// DO NOT EDIT!


#ifndef VISIONMSG_MESSAGE_TRAFFICLIGHT_H
#define VISIONMSG_MESSAGE_TRAFFICLIGHT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace visionmsg
{
template <class ContainerAllocator>
struct trafficlight_
{
  typedef trafficlight_<ContainerAllocator> Type;

  trafficlight_()
    : X(0.0)
    , Y(0.0)
    , distance(0.0)
    , trafficstatus(0)  {
    }
  trafficlight_(const ContainerAllocator& _alloc)
    : X(0.0)
    , Y(0.0)
    , distance(0.0)
    , trafficstatus(0)  {
  (void)_alloc;
    }



   typedef float _X_type;
  _X_type X;

   typedef float _Y_type;
  _Y_type Y;

   typedef float _distance_type;
  _distance_type distance;

   typedef int16_t _trafficstatus_type;
  _trafficstatus_type trafficstatus;





  typedef boost::shared_ptr< ::visionmsg::trafficlight_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visionmsg::trafficlight_<ContainerAllocator> const> ConstPtr;

}; // struct trafficlight_

typedef ::visionmsg::trafficlight_<std::allocator<void> > trafficlight;

typedef boost::shared_ptr< ::visionmsg::trafficlight > trafficlightPtr;
typedef boost::shared_ptr< ::visionmsg::trafficlight const> trafficlightConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::visionmsg::trafficlight_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::visionmsg::trafficlight_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::visionmsg::trafficlight_<ContainerAllocator1> & lhs, const ::visionmsg::trafficlight_<ContainerAllocator2> & rhs)
{
  return lhs.X == rhs.X &&
    lhs.Y == rhs.Y &&
    lhs.distance == rhs.distance &&
    lhs.trafficstatus == rhs.trafficstatus;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::visionmsg::trafficlight_<ContainerAllocator1> & lhs, const ::visionmsg::trafficlight_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace visionmsg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::visionmsg::trafficlight_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visionmsg::trafficlight_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visionmsg::trafficlight_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visionmsg::trafficlight_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visionmsg::trafficlight_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visionmsg::trafficlight_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::visionmsg::trafficlight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "321d017d73870823b230ad6b2628cf77";
  }

  static const char* value(const ::visionmsg::trafficlight_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x321d017d73870823ULL;
  static const uint64_t static_value2 = 0xb230ad6b2628cf77ULL;
};

template<class ContainerAllocator>
struct DataType< ::visionmsg::trafficlight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "visionmsg/trafficlight";
  }

  static const char* value(const ::visionmsg::trafficlight_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::visionmsg::trafficlight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 X\n"
"float32 Y\n"
"float32 distance\n"
"int16 trafficstatus\n"
;
  }

  static const char* value(const ::visionmsg::trafficlight_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::visionmsg::trafficlight_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.X);
      stream.next(m.Y);
      stream.next(m.distance);
      stream.next(m.trafficstatus);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct trafficlight_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visionmsg::trafficlight_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::visionmsg::trafficlight_<ContainerAllocator>& v)
  {
    s << indent << "X: ";
    Printer<float>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<float>::stream(s, indent + "  ", v.Y);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "trafficstatus: ";
    Printer<int16_t>::stream(s, indent + "  ", v.trafficstatus);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISIONMSG_MESSAGE_TRAFFICLIGHT_H
